# 
name: Deploy lumifi backend Infrastructure to devevelopment environmnet

on:
  push:
    branches:
      - develop
      
permissions:
  contents: read
  id-token: write

jobs:
  aws-resources-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend-infra
    env:
      ENVIRONMENT: dev
      AWS_REGION: us-east-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS Credentials
        env:
          AWS_CREDENTIALS: ${{ secrets.AWS_CREDENTIALS }}
        run: |
          echo "$AWS_CREDENTIALS" > aws_credentials.json
          AWS_ACCESS_KEY_ID=$(jq -r '.aws_access_key_id' aws_credentials.json)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.aws_secret_access_key' aws_credentials.json)
          
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$AWS_REGION" >> $GITHUB_ENV

      # Package Lambda function
      - name: Package Lambda function
        run: |
          cd lambda
          zip -r test_function.zip test_function.py
          cd ..

      # Deploy Terraform infrastructure
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Select/Create Workspace
        run: |
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Extract API Gateway URL
        id: output
        run: echo "API_URL=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT

      - name: Save Terraform Outputs
        run: terraform output -json > outputs.json
        if: always()

  deploy-serverless:
    needs: aws-resources-deploy
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: dev
      AWS_REGION: us-east-1
      API_ROOT_PATH: api/v1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        env:
          AWS_CREDENTIALS: ${{ secrets.AWS_CREDENTIALS }}
        run: |
          echo "$AWS_CREDENTIALS" > aws_credentials.json
          AWS_ACCESS_KEY_ID=$(jq -r '.aws_access_key_id' aws_credentials.json)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.aws_secret_access_key' aws_credentials.json)
          
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$AWS_REGION" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Serverless Framework
        run: npm install -g serverless@4.0.0

      - name: Create env.yml
        run: |
          cat <<EOF > env.yml
          $ENVIRONMENT:
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_PORT: ${{ secrets.DB_PORT }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            PG_ENCRYPT_SECRET: ${{ secrets.PG_ENCRYPT_SECRET }}
            AWS_SES_SENDER_EMAIL: ${{ secrets.AWS_SES_SENDER_EMAIL }}
            FE_APP_URL: ${{ secrets.FE_APP_URL }}
            API_ROOT_PATH: ${{ secrets.API_ROOT_PATH }}
            AWS_ACCESS_KEY_ID : ${{secrets.AWS_ACCESS_KEY_ID}}
            AWS_SECRET_ACCESS_KEY : ${{secrets.AWS_SECRET_ACCESS_KEY}}


          EOF

      - name: Deploy Serverless Application
        run: |
          # Set license key as environment variable
          export SERVERLESS_LICENSE_KEY=${{ secrets.SERVERLESS_LICENSE_KEY }}
          
          # Deploy with license key
          sls deploy --stage $ENVIRONMENT

# # Destroy the entire infrastructure comment Terraform plan and Terraform Apply
#       - name: Terraform Destroy
#         run: terraform destroy -auto-approve

#       - name: Remove secretes folder
#         run: |
#           aws secretsmanager delete-secret --secret-id dev-lumifi-rds_credentials-backend-v1 --force-delete-without-recovery